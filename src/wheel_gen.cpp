
/********************************************************************************************
* Standalone Engine Simulator
* Aaron S. (Detonation) 2023
******************************
  DESCRIPTION
  ====================
  Simple Engine Crank/Cam Trigger Simulator

  This project is a personal learning experience and isn't for end-user use.
  It will contain bugs, efficiency issues and is generally incomplete.
  If you are looking for an engine simulator I recommend the Speeduino fork of Ardustim.
       https://github.com/speeduino/Ardu-Stim
********************************************************************************************/

/********************************************************************************************
Notes: This file is for generating arrays upon selection hopefully saving space.

These functions where generated by chatGPT to progress the idea. The goal is to create a template
that can be filled out with various variables so new trigger wheels can be later added easily.

********************************************************************************************/

#include <Arduino.h>
#include "wheel_defs.h"
#include "wheel_gen.h"
#include "structures.h"

extern wheels Wheels[];
extern uint8_t currentPattern; // Currently selected pattern.

// This function will be used to generate trigger arrays when selected. (Very incomplete) saving large amounts of space
void generate_array(unsigned char *arr, int &size)
{

    if (currentPattern == 12)
    {
        size = 80;  
        generate_fourty_minus_one(arr);
    }
    if (currentPattern == 13)
    {
        size = 9;
        generate_dizzy_four_trigger_return(arr);
    }
    if (currentPattern == 14)
    {
        size = 24;
        generate_oddfire_vr(arr);
    }
    if (currentPattern == 15)
    {
        size = 720;
        generate_optispark_lt1(arr);
    }
}

// Test code that will go into pattern selection functions
void generateSelect()
{
    // You can generate the array based on a selection parameter, e.g., from user input
    unsigned char generated_array[1440]; // Set maximum array size. (720x2=1440) I cannot imagine a larger array.
    int array_size;

    generate_array(generated_array, array_size);
    // Now you can use the generated array in your program
}

// These are NOT tested or verified

// Wrong
void generate_fourty_minus_one(unsigned char *arr)
{
    for (int i = 0; i < 39; i++)
    {
        arr[i] = i % 2;
    }
    arr[39] = 0;
}

void generate_dizzy_four_trigger_return(unsigned char *arr)
{
    for (int i = 0; i < 5; i++)
    {
        arr[i] = 0;
    }
    for (int i = 5; i < 9; i++)
    {
        arr[i] = 1;
    }
}

// Wrong
void generate_oddfire_vr(unsigned char *arr)
{
    arr[0] = 1;
    for (int i = 1; i < 9; i++)
    {
        arr[i] = 0;
    }
    arr[9] = 1;
    for (int i = 10; i < 24; i++)
    {
        arr[i] = 0;
    }
}

// Wrong
void generate_optispark_lt1(unsigned char *arr)
{
    for (int i = 0; i < 360; i++)
    {
        arr[i] = (i % 2) ? 1 : 0;
    }
    for (int i = 0; i < 8; i++)
    {
        arr[50 + i * 30] = 2;
        arr[50 + i * 30 + 1] = 3;
    }
}
